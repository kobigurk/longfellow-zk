/**
 * C++ Proof Verifier Executable
 */

#include "cpp_verifier.hpp"
#include <iostream>
#include <string>
#include <cstring>
#include <iomanip>

void print_usage(const char* program_name) {
    std::cout << "Usage: " << program_name << " [OPTIONS] <proof_file>\n";
    std::cout << "\nOptions:\n";
    std::cout << "  -h, --help          Show this help message\n";
    std::cout << "  -v, --verbose       Enable verbose output\n";
    std::cout << "  -d, --detailed      Show detailed verification results\n";
    std::cout << "\nArguments:\n";
    std::cout << "  proof_file          Binary proof file generated by Rust prover\n";
    std::cout << "\nExamples:\n";
    std::cout << "  " << program_name << " proof.bin\n";
    std::cout << "  " << program_name << " -v -d proof.bin\n";
}

int main(int argc, char* argv[]) {
    bool verbose = false;
    bool detailed = false;
    std::string proof_file;
    
    // Parse command line arguments
    for (int i = 1; i < argc; ++i) {
        if (strcmp(argv[i], "-h") == 0 || strcmp(argv[i], "--help") == 0) {
            print_usage(argv[0]);
            return 0;
        } else if (strcmp(argv[i], "-v") == 0 || strcmp(argv[i], "--verbose") == 0) {
            verbose = true;
        } else if (strcmp(argv[i], "-d") == 0 || strcmp(argv[i], "--detailed") == 0) {
            detailed = true;
        } else if (proof_file.empty()) {
            proof_file = argv[i];
        } else {
            std::cerr << "Error: Unexpected argument '" << argv[i] << "'\n";
            print_usage(argv[0]);
            return 1;
        }
    }
    
    if (proof_file.empty()) {
        std::cerr << "Error: No proof file specified\n";
        print_usage(argv[0]);
        return 1;
    }
    
    std::cout << "🔐 Longfellow ZK C++ Proof Verifier\n";
    std::cout << "===================================\n\n";
    
    // Create verifier and load proof
    auto verifier = longfellow::create_verifier();
    
    if (verbose) {
        std::cout << "📂 Loading proof from: " << proof_file << "\n";
    }
    
    if (!verifier->load_proof_from_file(proof_file)) {
        std::cerr << "❌ Failed to load proof from: " << proof_file << "\n";
        return 1;
    }
    
    if (verbose) {
        std::cout << "✅ Proof loaded successfully\n\n";
    }
    
    // Perform verification
    if (detailed) {
        if (verbose) {
            std::cout << "🔍 Verifying proof...\n\n";
        }
        
        auto result = verifier->verify_detailed();
        
        std::cout << "🔍 Verification Result\n";
        std::cout << "=====================\n";
        
        if (result.is_valid) {
            std::cout << "✅ PROOF VALID\n";
        } else {
            std::cout << "❌ PROOF INVALID\n";
            if (!result.error_message.empty()) {
                std::cout << "Error: " << result.error_message << "\n";
            }
        }
        
        std::cout << "Verification time: " << std::fixed << std::setprecision(2) 
                  << result.verification_time_ms << " ms\n\n";
        
        if (!result.details.empty()) {
            std::cout << "📊 Details:\n";
            for (const auto& detail : result.details) {
                std::cout << "  " << detail.first << ": " << detail.second << "\n";
            }
        }
        
        return result.is_valid ? 0 : 1;
    } else {
        // Simple verification
        if (verbose) {
            std::cout << "🔍 Verifying proof...\n";
        }
        
        bool is_valid = verifier->verify();
        
        if (is_valid) {
            std::cout << "✅ PROOF VALID\n";
            return 0;
        } else {
            std::cout << "❌ PROOF INVALID\n";
            return 1;
        }
    }
}